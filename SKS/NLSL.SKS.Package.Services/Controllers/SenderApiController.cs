/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.20.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;

using AutoMapper;

using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

using NLSL.SKS.Package.BusinessLogic.CustomExceptions;
using NLSL.SKS.Package.BusinessLogic.Interfaces;
using NLSL.SKS.Package.DataAccess.Sql.CustomExceptinos;
using NLSL.SKS.Package.ServiceAgents.Exceptions;
using NLSL.SKS.Package.Services.Attributes;
using NLSL.SKS.Package.Services.DTOs;

using Swashbuckle.AspNetCore.Annotations;

namespace NLSL.SKS.Package.Services.Controllers
{
    /// <summary>
    /// </summary>
    [ApiController]
    public class SenderApiController : ControllerBase
    {
        private readonly IMapper _mapper;
        private readonly IParcelLogic _parcelLogic;
        private readonly ILogger<SenderApiController> _logger;
        public SenderApiController(IParcelLogic parcelLogic, IMapper mapper, ILogger<SenderApiController> logger)
        {
            _parcelLogic = parcelLogic;
            _mapper = mapper;
            _logger = logger;
        }
        /// <summary>
        /// Submit a new parcel to the logistics service.
        /// </summary>
        /// <param name="body"></param>
        /// <response code="201">Successfully submitted the new parcel</response>
        /// <response code="400">The operation failed due to an error.</response>
        [HttpPost]
        [Route("/parcel")]
        [ValidateModelState]
        [SwaggerOperation("SubmitParcel")]
        [SwaggerResponse(201, type: typeof(NewParcelInfo), description: "Successfully submitted the new parcel")]
        [SwaggerResponse(400, type: typeof(Error), description: "The operation failed due to an error.")]
        public virtual IActionResult SubmitParcel([FromBody] Parcel parcel)
        {
            try
            {
                _logger.LogDebug("SubmitParcel Request recieved");
                
                BusinessLogic.Entities.Parcel eParcel = _mapper.Map<Parcel, BusinessLogic.Entities.Parcel>(parcel);

                BusinessLogic.Entities.Parcel? newParcelInfo = _parcelLogic.Submit(eParcel);

                if (newParcelInfo is null)
                {
                    _logger.LogWarning("SubmitParcel failed newParcelInfo is null");
                    return new BadRequestObjectResult(
                        new Error { ErrorMessage = "The operation failed due to an error." });
                }

                NewParcelInfo? resultNewParcelInfo = _mapper.Map<BusinessLogic.Entities.Parcel, NewParcelInfo>(newParcelInfo);

                _logger.LogDebug("SubmitParcel successful");
                return new ObjectResult(resultNewParcelInfo) { StatusCode = 201 };
            }
            catch (BusinessLayerExceptionBase e) when (e.InnerException is BusinessLayerDataNotFoundException)
            {
                _logger.LogError(e,$"TrackParcel failed with {e.Message}");
                return new BadRequestObjectResult(new Error() {ErrorMessage = $"The operation failed due to an error."});
            }
            catch (BusinessLayerExceptionBase e) when (e.InnerException is BusinessLayerValidationException)
            {
                _logger.LogError(e,$"TrackParcel failed with {e.Message}");
                return new BadRequestObjectResult(new Error() {ErrorMessage = $"The operation failed due to an error."});
            }
            catch (BusinessLayerExceptionBase e) when (e.InnerException is DataAccessExceptionBase)
            {
                _logger.LogError(e,$"TrackParcel failed with {e.Message}");
                return new BadRequestObjectResult(new Error
                                                  { ErrorMessage = $"The operation failed due to an error." });
            }
            catch (Exception exception)
            {
                _logger.LogError(exception,$"TrackParcel failed with {exception.Message}");
                
                return new BadRequestObjectResult(new Error
                                                  { ErrorMessage = $"The operation failed due to an error." });
            }
        }
    }
}