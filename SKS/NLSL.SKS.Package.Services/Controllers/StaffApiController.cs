/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.20.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.ComponentModel.DataAnnotations;

using Microsoft.AspNetCore.Mvc;

using NLSL.SKS.Package.BusinessLogic.Entities;
using NLSL.SKS.Package.BusinessLogic.Interfaces;
using NLSL.SKS.Package.Services.Attributes;

using Swashbuckle.AspNetCore.Annotations;

using Error = NLSL.SKS.Package.Services.DTOs.Error;

namespace NLSL.SKS.Package.Services.Controllers
{
    /// <summary>
    /// </summary>
    [ApiController]
    public class StaffApiController : ControllerBase
    {
        private readonly IParcelManagement _parcelManagement;
        public StaffApiController(IParcelManagement parcelManagement)
        {
            _parcelManagement = parcelManagement;
        }

        /// <summary>
        /// Report that a Parcel has arrived at a certain hop either Warehouse or Truck
        /// </summary>
        /// <param name="trackingId">The tracking ID of the parcel. E.g. PYJRB4HZ6 </param>
        /// <param name="code">The Code of the hop (Warehouse or Truck).</param>
        /// <response code="200">Successfully reported hop.</response>
        /// <response code="500">An error occured.</response>
        [HttpPost]
        [Route("/parcel/{trackingId}/reportHop/{code}/")]
        [ValidateModelState]
        [SwaggerOperation("ReportHop")]
        [SwaggerResponse(500, type: typeof(Error), description: "An error occured.")]
        public virtual IActionResult ReportHop([FromRoute] [Required] [RegularExpression("^[A-Z0-9]{9}$")] string trackingId, [FromRoute] [Required] [RegularExpression("^[A-Z]{4}\\d{1,4}$")] string code)
        {
            TrackingId trackingIdObject = new TrackingId(trackingId);
            ReportHop reportHop = new ReportHop() { HopCode = code, TrackingId = trackingIdObject };
            
            bool isSuccessful = _parcelManagement.ReportHop(reportHop);

            if (!isSuccessful)
                return new ObjectResult(new Error() { ErrorMessage = "An error occured." }) { StatusCode = 500 };

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            return StatusCode(200);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
        }

        /// <summary>
        /// Report that a Parcel has been delivered at it&#x27;s final destination address.
        /// </summary>
        /// <param name="trackingId">The tracking ID of the parcel. E.g. PYJRB4HZ6 </param>
        /// <response code="200">Successfully reported hop.</response>
        /// <response code="400">The operation failed due to an error.</response>
        /// <response code="404">Parcel does not exist with this tracking ID. </response>
        [HttpPost]
        [Route("/parcel/{trackingId}/reportDelivery/")]
        [ValidateModelState]
        [SwaggerOperation("ReportParcelDelivery")]
        [SwaggerResponse(400, type: typeof(Error), description: "The operation failed due to an error.")]
        [SwaggerResponse(404, type: typeof(Error), description: "Parcel does not exist with this tracking ID.")]
        public virtual IActionResult ReportParcelDelivery([FromRoute] [Required] [RegularExpression("^[A-Z0-9]{9}$")] string trackingId)
        {
            TrackingId trackingIdObject = new TrackingId(trackingId);
            bool? isDelivered = _parcelManagement.Delivered(trackingIdObject);
            
            if(isDelivered is null)
                return new NotFoundObjectResult(new Error() { ErrorMessage = "Parcel does not exist with this tracking ID. " });

            if (!isDelivered.Value)
                return new BadRequestObjectResult(new Error() { ErrorMessage = "The operation failed due to an error." });

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
        }
    }
}