/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.20.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

#nullable enable

using System;
using System.ComponentModel.DataAnnotations;

using AutoMapper;

using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

using NLSL.SKS.Package.BusinessLogic.CustomExceptions;
using NLSL.SKS.Package.BusinessLogic.Entities;
using NLSL.SKS.Package.BusinessLogic.Interfaces;
using NLSL.SKS.Package.DataAccess.Sql.CustomExceptinos;
using NLSL.SKS.Package.ServiceAgents.Exceptions;
using NLSL.SKS.Package.Services.Attributes;
using NLSL.SKS.Package.Services.DTOs;

using Swashbuckle.AspNetCore.Annotations;

using Error = NLSL.SKS.Package.Services.DTOs.Error;
using Parcel = NLSL.SKS.Package.BusinessLogic.Entities.Parcel;

namespace NLSL.SKS.Package.Services.Controllers
{
    /// <summary>
    /// </summary>
    [ApiController]
    public class RecipientApiController : ControllerBase
    {
        private readonly IMapper _mapper;

        private readonly IParcelLogic _parcelLogic;
        private readonly ILogger<RecipientApiController> _logger;
        public RecipientApiController(IParcelLogic parcelLogic, IMapper mapper, ILogger<RecipientApiController> logger)
        {
            _parcelLogic = parcelLogic;
            _mapper = mapper;
            _logger = logger;
        }
        /// <summary>
        /// Find the latest state of a parcel by its tracking ID.
        /// </summary>
        /// <param name="trackingId">The tracking ID of the parcel. E.g. PYJRB4HZ6 </param>
        /// <response code="200">Parcel exists, here&#x27;s the tracking information.</response>
        /// <response code="400">The operation failed due to an error.</response>
        /// <response code="404">Parcel does not exist with this tracking ID.</response>
        [HttpGet]
        [Route("/parcel/{trackingId}")]
        [ValidateModelState]
        [SwaggerOperation("TrackParcel")]
        [SwaggerResponse(200, type: typeof(TrackingInformation),
            description: "Parcel exists, here&#x27;s the tracking information.")]
        [SwaggerResponse(400, type: typeof(Error), description: "The operation failed due to an error.")]
        public virtual IActionResult TrackParcel(
            [FromRoute] [Required] [RegularExpression("^[A-Z0-9]{9}$")]
            string trackingId)
        {
            try
            {
                _logger.LogDebug("TrackParcel Request received");
            
                TrackingId trackingIdObject = new TrackingId(trackingId);

                Parcel? trackingParcel = _parcelLogic.Track(trackingIdObject);

                if (trackingParcel is null)
                {
                    _logger.LogWarning($"TrackParcel failed trackingParcel is null");
                    
                    return new NotFoundObjectResult(
                        new Error { ErrorMessage = "tracked parcel not found" });
                }

                TrackingInformation resultParcel = _mapper.Map<Parcel, TrackingInformation>(trackingParcel);

                
                _logger.LogDebug("TrackParcel successful");
                return new OkObjectResult(resultParcel);

            }
            catch (BusinessLayerExceptionBase e) when (e.InnerException is BusinessLayerDataNotFoundException)
            {
                _logger.LogError(e,$"TrackParcel failed with {e.Message}");
                return new NotFoundObjectResult(new Error() {ErrorMessage = $"Parcel does not exist with this tracking ID."});
            }
            catch (BusinessLayerExceptionBase e) when (e.InnerException is BusinessLayerValidationException)
            {
                _logger.LogError(e,$"TrackParcel failed with {e.Message}");
                return new BadRequestObjectResult(new Error() {ErrorMessage = $"The operation failed due to an error."});
            }
            catch (BusinessLayerExceptionBase e) when (e.InnerException is DataAccessExceptionBase)
            {
                _logger.LogError(e,$"TrackParcel failed with {e.Message}");
                return new BadRequestObjectResult(new Error
                                                  { ErrorMessage = $"The operation failed due to an error." });
            }
            catch (Exception exception)
            {
                _logger.LogError(exception,$"TrackParcel failed with {exception.Message}");
                
                return new BadRequestObjectResult(new Error
                                                  { ErrorMessage = $"The operation failed due to an error." });
            }
           
        }
    }
}