/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.20.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.ComponentModel.DataAnnotations;
using System.Text.RegularExpressions;

using Microsoft.AspNetCore.Mvc;

using NLSL.SKS.Package.Services.Attributes;
using NLSL.SKS.Package.Services.DTOs;

using Swashbuckle.AspNetCore.Annotations;

namespace NLSL.SKS.Package.Services.Controllers
{
    /// <summary>
    /// </summary>
    [ApiController]
    public class LogisticsPartnerApiController : ControllerBase
    {
        /// <summary>
        /// Transfer an existing parcel into the system from the service of a logistics partner.
        /// </summary>
        /// <param name="body"></param>
        /// <param name="trackingId">The tracking ID of the parcel. E.g. PYJRB4HZ6 </param>
        /// <response code="200">Successfully transitioned the parcel</response>
        /// <response code="400">The operation failed due to an error.</response>
        [HttpPost]
        [Route("/parcel/{trackingId}")]
        [ValidateModelState]
        [SwaggerOperation("TransitionParcel")]
        [SwaggerResponse(200, type: typeof(NewParcelInfo), description: "Successfully transitioned the parcel")]
        [SwaggerResponse(400, type: typeof(Error), description: "The operation failed due to an error.")]
        public virtual IActionResult TransitionParcel([FromBody] Parcel body, [FromRoute] [Required] [RegularExpression("^[A-Z0-9]{9}$")] string trackingId)
        {
            _ = body ?? throw new ArgumentNullException(nameof(body));
            _ = body.Weight ?? throw new ArgumentNullException(nameof(body.Weight));
            _ = body.Sender ?? throw new ArgumentNullException(nameof(body.Sender));
            _ = body.Recipient ?? throw new ArgumentNullException(nameof(body.Recipient));
            _ = body.Sender.City ?? throw new ArgumentNullException(nameof(body.Sender.City));
            _ = body.Sender.Street ?? throw new ArgumentNullException(nameof(body.Sender.Street));
            _ = body.Sender.Name ?? throw new ArgumentNullException(nameof(body.Sender.Name));
            _ = body.Sender.PostalCode ?? throw new ArgumentNullException(nameof(body.Sender.PostalCode));
            _ = body.Sender.Country ?? throw new ArgumentNullException(nameof(body.Sender.Country));
            _ = body.Recipient.City ?? throw new ArgumentNullException(nameof(body.Recipient.City));
            _ = body.Recipient.Street ?? throw new ArgumentNullException(nameof(body.Recipient.Street));
            _ = body.Recipient.Name ?? throw new ArgumentNullException(nameof(body.Recipient.Name));
            _ = body.Recipient.PostalCode ?? throw new ArgumentNullException(nameof(body.Recipient.PostalCode));
            _ = body.Recipient.Country ?? throw new ArgumentNullException(nameof(body.Recipient.Country));
            _ = trackingId ?? throw new ArgumentNullException(nameof(trackingId));
            if (Regex.Match(trackingId, "^[A-Z0-9]{9}$").Success is false)
            {
                throw new ArgumentException(nameof(trackingId));
            }

            return StatusCode(200);
        }
    }
}