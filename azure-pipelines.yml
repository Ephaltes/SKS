
# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET Core sdk 6'
  inputs:
    packageType: 'sdk'
    version: '6.x'
- task: DotNetCoreCLI@2
  inputs:
    command: build
    projects: 
      SKS/SKS.sln
  displayName: Build

- task: DotNetCoreCLI@2
  inputs:
    command: test
    projects: '**/*.Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura'
  displayName: Test

- task: reportgenerator@4
  displayName: 'Merge code coverage reports'
  inputs:
    reports: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
    targetdir: '$(Pipeline.Workspace)/coverlet'
    reporttypes: 'Cobertura'
    verbosity: 'Verbose'
     
- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage results'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Pipeline.Workspace)/coverlet/Cobertura.xml'

- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: true
    arguments: 'SKS/NLSL.SKS.Package.Services/NLSL.SKS.Package.Services.csproj --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: true
  displayName: Publish API
- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: true
    arguments: 'SKS/NLSL.SKS.Package.Blazor/NLSL.SKS.Package.Blazor.csproj --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: true
  displayName: Publish Frontend

- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: false
    arguments: 'SKS/NLSL.SKS.Package.IntegrationTests/NLSL.SKS.Package.IntegrationTests.csproj --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: false
  displayName: Publish IntegrationTest

# this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'NLSL_WebApp'
  displayName: create artefact
